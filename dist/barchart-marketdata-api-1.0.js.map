{"version":3,"sources":["barchart-realtimedata-util-1.0.js","barchart-realtimedata-connection-1.0.js","barchart-realtimedata-historicaldata-1.0.js","barchart-realtimedata-marketstate-1.0.js","barchart-realtimedata-messageparser-1.0.js"],"names":[],"mappingsxkfile":"barchart-marketdata-api-1.0.js","sourcesContent":["/*!\r\n * barchart-realtimedata-1.0.0.js\r\n * Barchart Realtime Data JavaScript Library v1.0.0\r\n * http://www.barchart.com-barchart-realtimedata-1\r\n *\r\n * Copyright 2014 - 2015 Barchart.com, Inc.\r\n */\r\n;(function() {\r\n    // The Barchart namespace\r\n    if (!window.Barchart) window.Barchart = {};\r\n    if (!window.Barchart.RealtimeData) window.Barchart.RealtimeData = {}\r\n}());\r\n\r\n\r\n// Class to format Barchart prices.\r\n// @param fractionSeparator for display. Sometimes we use a dash (-), sometimes an apostrophe (')\r\n// @param specialFractions TRUE if we want 32nsd and halves and 32nds and quarters for unit\r\n// codes of 5, 6, and 7. Otherwise these would be 64ths and 128th.\r\n\r\nBarchart.RealtimeData.Util = {\r\n    MonthCodes : {\r\n        \"F\" : \"January\",\r\n        \"G\" : \"February\",\r\n        \"H\" : \"March\",\r\n        \"J\" : \"April\",\r\n        \"K\" : \"May\",\r\n        \"M\" : \"June\",\r\n        \"N\" : \"July\",\r\n        \"Q\" : \"August\",\r\n        \"U\" : \"September\",\r\n        \"V\" : \"October\",\r\n        \"X\" : \"November\",\r\n        \"Z\" : \"December\"\r\n    },\r\n    BaseCode2UnitCode : function(basecode) {\r\n        switch(basecode) {\r\n            case -1: return '2';\r\n            case -2: return '3';\r\n            case -3: return '4';\r\n            case -4: return '5';\r\n            case -5: return '6';\r\n            case -6: return '7';\r\n            case 0: return '8';\r\n            case 1: return '9';\r\n            case 2: return 'A';\r\n            case 3: return 'B';\r\n            case 4: return 'C';\r\n            case 5: return 'D';\r\n            case 6: return 'E';\r\n            case 7: return 'F';\r\n            default: return 0;\r\n        }\r\n    },\r\n    DayCodeToNumber : function(dayCode) {\r\n        var val1 = dayCode.charCodeAt(0);\r\n\r\n        if ((val1 >= (\"1\").charCodeAt(0)) && (dayCode <= (\"9\").charCodeAt(0)))\r\n            return (val1 - (\"0\").charCodeAt(0));\r\n        else if (dayCode == (\"0\").charCodeAt(0))\r\n            return 10;\r\n        else\r\n            return ((val1 - (\"A\").charCodeAt(0)) + 11);\r\n    },\r\n    DateToDayCode : function(date) {\r\n        var d = date.getDate();\r\n\r\n        if ((d >= 1) && (d <= 9))\r\n            return String.fromCharCode((\"1\").charCodeAt(0) + d - 1);\r\n        else if (d == 10)\r\n            return '0';\r\n        else\r\n            return String.fromCharCode((\"A\").charCodeAt(0) + d - 11);\r\n    },\r\n    // Parses a symbol, and determines if it is a future,\r\n    // equity, future option, index, etc.\r\n    ParseSymbolType : function(symbol) {\r\n        if (symbol.substring(0, 3) == '_S_') {\r\n            return {\r\n                'type' : 'future_spread'\r\n            };\r\n        };\r\n\r\n        var re1 = /[0-9]$/;\r\n        // If we end in a number, then we are a future\r\n        if (re1.test(symbol)) {\r\n            var re2 = /^(.{1,3})([A-Z])([0-9]{1,4})$/i;\r\n            var ary = re2.exec(symbol);\r\n            var year = parseInt(ary[3]);\r\n            if (year < 10)\r\n                year += 2010;\r\n            else if (year < 100)\r\n                year += 2000;\r\n\r\n            return {\r\n                type: 'future',\r\n                symbol: ary[0],\r\n                root: ary[1],\r\n                month: ary[2],\r\n                year: year\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n    PriceFormatter : function(fractionSeparator, specialFractions) {\r\n        var format = undefined;\r\n\r\n        function frontPad(value, digits) {\r\n            return ['000', Math.floor(value)].join('').substr(-1 * digits);\r\n        }\r\n\r\n\r\n        if (fractionSeparator == '.') { // Decimals\r\n            format = function(value, unitcode) {\r\n                if (!value)\r\n                    return '';\r\n\r\n                switch (unitcode) {\r\n                    case '2':\r\n                        return value.toFixed(3);\r\n                        break;\r\n                    case '3':\r\n                        return value.toFixed(4);\r\n                        break;\r\n                    case '4':\r\n                        return value.toFixed(5);\r\n                        break;\r\n                    case '5':\r\n                        return value.toFixed(6);\r\n                        break;\r\n                    case '6':\r\n                        return value.toFixed(7);\r\n                        break;\r\n                    case '7':\r\n                        return value.toFixed(8);\r\n                        break;\r\n                    case '8':\r\n                        return value.toFixed(0);\r\n                        break;\r\n                    case '9':\r\n                        return value.toFixed(1);\r\n                        break;\r\n                    case 'A':\r\n                        return value.toFixed(2);\r\n                        break;\r\n                    case 'B':\r\n                        return value.toFixed(3);\r\n                        break;\r\n                    case 'C':\r\n                        return value.toFixed(4);\r\n                        break;\r\n                    case 'D':\r\n                        return value.toFixed(5);\r\n                        break;\r\n                    case 'E':\r\n                        return value.toFixed(6);\r\n                        break;\r\n                    default:\r\n                        return value;\r\n                        break;                \r\n                }\r\n            };  \r\n\r\n        }\r\n        else {\r\n            format = function(value, unitcode) {\r\n                if (!value)\r\n                    return '';\r\n\r\n                var sign = (value >= 0) ? '' : '-';\r\n                value = Math.abs(value);\r\n\r\n                switch (unitcode) {\r\n                    case '2':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * 8, 1)].join('');\r\n                        break;\r\n                    case '3':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * 16, 2)].join('');\r\n                        break;\r\n                    case '4':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * 32, 2)].join('');\r\n                        break;\r\n                    case '5':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * (specialFractions ? 320 : 64), (specialFractions ? 3 : 2))].join('');\r\n                        break;\r\n                    case '6':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * (specialFractions ? 320 : 128), 3)].join('');\r\n                        break;\r\n                    case '7':\r\n                        return [sign, Math.floor(value), fractionSeparator, frontPad((value - Math.floor(value)) * (specialFractions ? 320 : 256), 3)].join('');\r\n                        break;\r\n                    case '8':\r\n                        return sign + value.toFixed(0);\r\n                        break;\r\n                    case '9':\r\n                        return sign + value.toFixed(1);\r\n                        break;\r\n                    case 'A':\r\n                        return sign + value.toFixed(2);\r\n                        break;\r\n                    case 'B':\r\n                        return sign + value.toFixed(3);\r\n                        break;\r\n                    case 'C':\r\n                        return sign + value.toFixed(4);\r\n                        break;\r\n                    case 'D':\r\n                        return sign + value.toFixed(5);\r\n                        break;\r\n                    case 'E':\r\n                        return sign + value.toFixed(6);\r\n                        break;\r\n                    default:\r\n                        return sign + value;\r\n                        break;                \r\n                }\r\n            };\r\n        }\r\n\r\n        return {\r\n            format : format\r\n        }  \r\n    },\r\n    TimeFormatter : function() {\r\n\r\n        function format(t) {\r\n            return [['00', t.getHours()].join('').substr(-2), ['00', t.getMinutes()].join('').substr(-2), ['00', t.getSeconds()].join('').substr(-2), ['000', t.getMilliseconds()].join('').substr(-3)].join(':');\r\n        }\r\n\r\n        return {\r\n            format : format\r\n        }\r\n    },\r\n    UnitCode2BaseCode : function(unitcode) {\r\n        switch(unitcode) {\r\n            case '2': return -1;\r\n            case '3': return -2;\r\n            case '4': return -3;\r\n            case '5': return -4;\r\n            case '6': return -5;\r\n            case '7': return -6;\r\n            case '8': return 0;\r\n            case '9': return 1;\r\n            case 'A': return 2;\r\n            case 'B': return 3;\r\n            case 'C': return 4;\r\n            case 'D': return 5;\r\n            case 'E': return 6;\r\n            case 'F': return 7;\r\n            default: return 0;\r\n        }\r\n    }\r\n};\r\n\r\n","/*!\r\n * barchart-realtimedata-connection-1.0.js\r\n * Barchart Realtime Data JavaScript Library v1.0\r\n *\r\n * Copyright 2014 - 2015 Barchart.com, Inc.\r\n */\r\n;(function() {\r\n    // The Barchart namespace\r\n    if (!window.Barchart) window.Barchart = {};\r\n    if (!window.Barchart.RealtimeData) window.Barchart.RealtimeData = {}\r\n}());\r\n\r\n/*\r\n * The main Connection object\r\n */\r\n\r\nBarchart.RealtimeData.Connection = function() {\r\n    /* Constants */\r\n    _API_VERSION = 4;\r\n\r\n    var __state = 'DISCONNECTED';\r\n    var __isConsumerDisconnect = false;\r\n    var __symbols = {};\r\n    var __tasks = {\r\n        \"symbols\" : [],\r\n        \"symbols_off\" : []\r\n    };\r\n\r\n    var __commands = [];\r\n    var __connection = null;\r\n    var __feedMessages = [];\r\n    var __marketState = new Barchart.RealtimeData.MarketState();\r\n    var __networkMessages = [];\r\n    var __listeners = {\r\n    \tevents : [],\r\n        marketDepth : {},\r\n        marketUpdate : {},\r\n        timestamp : []\r\n    };\r\n    var __loginInfo = {\r\n        \"username\" : null,\r\n        \"password\" : null,\r\n        \"server\" : null\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    function broadcastEvent(eventId, message) {\r\n        var ary;\r\n        switch (eventId) {\r\n            case 'events':\r\n                ary = __listeners.events;\r\n                break;\r\n            case 'marketDepth':\r\n                ary = __listeners.marketDepth[message.symbol];\r\n                break;\r\n            case 'marketUpdate':\r\n                ary = __listeners.marketUpdate[message.symbol];\r\n                break;\r\n            case 'timestamp':\r\n                ary = __listeners.timestamp;\r\n                break;\r\n        }\r\n\r\n        if (!ary)\r\n            return;\r\n\r\n        for (var i = 0; i < ary.length; i++) {\r\n            ary[i](message);\r\n        }\r\n    }\r\n\r\n\r\n    function connect(server, username, password) {\r\n        if (__connection)\r\n            return;\r\n\r\n        /* don't try to reconnect if explicitly told to disconnect */\r\n        if(__isConsumerDisconnect === true){\r\n            return;\r\n        }\r\n\r\n        __loginInfo.username = username;\r\n        __loginInfo.password = password;\r\n        __loginInfo.server = server;\r\n\r\n\r\n        if (window[\"WebSocket\"]) {\r\n            __state = 'DISCONNECTED';\r\n            __connection = new WebSocket(\"wss://\" + __loginInfo.server + \"/jerq\");\r\n\r\n            __connection.onclose = function(evt) {\r\n                console.warn(new Date() + ' connection closed.');\r\n                __connection = null;\r\n\r\n                if (__state != 'LOGGED_IN')\r\n                    return;\r\n\r\n                __state = 'DISCONNECTED';\r\n\r\n                broadcastEvent('events', { event: 'disconnect' });\r\n                setTimeout(function() {\r\n                    // Retry the connection\r\n                    // Possible there are some timing issues. Theoretically, is a user is\r\n                    // adding a symbol at the exact same time that this triggers, the new symbol\r\n                    // coould go unheeded, or *just* the new symbol, and the old symbols\r\n                    // would be ignored.\r\n                    __connection = null;\r\n                    connect(__loginInfo.server, __loginInfo.username, __loginInfo.password);\r\n                    if (__tasks.symbols.length == 0) {\r\n                        for (var k in __symbols) {\r\n                            __tasks.symbols.push(k);\r\n                        }\r\n                    }\r\n                }, 5000);\r\n            };\r\n\r\n            __connection.onmessage = function(evt) {\r\n                __networkMessages.push(evt.data);\r\n            };\r\n\r\n            __connection.onopen = function(evt) {\r\n                console.log(new Date() + ' connection open.')\r\n            };\r\n        }\r\n        else {\r\n            console.warn('Websockets are not supported by this browser. Invoking refreshing quotes.');\r\n            setTimeout(refreshQuotes, 1000);\r\n        }\r\n    }\r\n\r\n\r\n    function disconnect() {        \r\n        __state = 'DISCONNECTED';\r\n\r\n        if (__connection != null) {\r\n            __connection.send(\"LOGOUT\\r\\n\");\r\n            __connection.close();\r\n            __connection = null;\r\n        }\r\n\r\n        __commands = [];\r\n        __messages = [];\r\n        __symbols = {};\r\n    }\r\n\r\n\r\n    function handleNetworkMessage(msg) {\r\n        if (__state == 'DISCONNECTED')\r\n            __state = 'CONNECTING';\r\n\r\n        if (__state == 'CONNECTING') {\r\n            var lines = msg.split(\"\\n\");\r\n            for (var i = 0; i < lines.length; i++) {\r\n                if (lines[i] == '+++') {\r\n                    __state = 'LOGGING_IN';\r\n                    __commands.push('LOGIN ' + __loginInfo.username + ':' + __loginInfo.password + \" VERSION=\" + _API_VERSION + \"\\r\\n\");\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (__state == 'LOGGING_IN') {\r\n            if (msg.substr(0, 1) == '+') {\r\n                __state = 'LOGGED_IN';\r\n                broadcastEvent('events', { event : 'login success'} );\r\n            }\r\n            else if (msg.substr(0, 1) == '-') {\r\n                disconnect();\r\n                __state = 'LOGIN_FAILED';\r\n                broadcastEvent('events', { event : 'login fail'} );\r\n            }\r\n        }\r\n\r\n        if (__state == 'LOGGED_IN') {\r\n            __feedMessages.push(msg);\r\n        }\r\n    }\r\n\r\n\r\n    function getMarketState() {\r\n        return __marketState;\r\n    }\r\n\r\n\r\n    function getPassword() {\r\n        return __loginInfo.password;\r\n    }\r\n\r\n\r\n    function getUsername() {\r\n        return __loginInfo.username;\r\n    }\r\n\r\n\r\n    function off() {\r\n        if (arguments.length < 2)\r\n            throw new Error(\"Bad number of arguments. Must pass in an evnetId and handler.\");\r\n\r\n        var eventId = arguments[0];\r\n        var handler = arguments[1];\r\n\r\n        switch (eventId) {\r\n            case 'events': {\r\n                for (var i = 0; i < __listeners.events.length; i++) {\r\n                    if (__listeners.events[i] == handler) {\r\n                        __listeners.events.splice(i, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'marketDepth': {\r\n                if (arguments.length < 3)\r\n                    throw new Error(\"Bad number of arguments. For marketUpdate events, please specify a symbol. on('marketUpdate', handler, symbol).\");\r\n\r\n                var symbol = arguments[2];\r\n\r\n                if (!__listeners.marketDepth[symbol])\r\n                    return;\r\n\r\n                for (var i = 0; i < __listeners.marketDepth[symbol].length; i++) {\r\n                    if (__listeners.marketDepth[symbol][i] == handler) {\r\n                        __listeners.marketDepth[symbol].splice(i, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'marketUpdate': {\r\n                if (arguments.length < 3)\r\n                    throw new Error(\"Bad number of arguments. For marketUpdate events, please specify a symbol. on('marketUpdate', handler, symbol).\");\r\n\r\n                var symbol = arguments[2];\r\n\r\n                if (!__listeners.marketUpdate[symbol])\r\n                    return;\r\n\r\n                for (var i = 0; i < __listeners.marketUpdate[symbol].length; i++) {\r\n                    if (__listeners.marketUpdate[symbol][i] == handler)\r\n                        __listeners.marketUpdate[symbol].splice(i, 1);        \r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n\r\n    function on() {\r\n        if (arguments.length < 2)\r\n            throw new Error(\"Bad number of arguments. Must pass in an evnetId and handler.\");\r\n\r\n        var eventId = arguments[0];\r\n        var handler = arguments[1];\r\n\r\n        switch (eventId) {\r\n            case 'events': {\r\n                var add = true;\r\n                for (var i = 0; i < __listeners.events.length; i++) {\r\n                    if (__listeners.events[i] == handler)\r\n                        add = false;                \r\n                }\r\n\r\n                if (add)\r\n                    __listeners.events.push(handler);                    \r\n                break;\r\n            }\r\n            case 'marketDepth': {\r\n                if (arguments.length < 3)\r\n                    throw new Error(\"Bad number of arguments. For marketUpdate events, please specify a symbol. on('marketUpdate', handler, symbol).\");\r\n\r\n                var symbol = arguments[2];\r\n\r\n                if (!__listeners.marketDepth[symbol])\r\n                    __listeners.marketDepth[symbol] = [];\r\n\r\n                var add = true;\r\n                for (var i = 0; i < __listeners.marketDepth[symbol].length; i++) {\r\n                    if (__listeners.marketDepth[symbol][i] == handler)\r\n                        add = false;                \r\n                }\r\n\r\n                if (add)\r\n                    __listeners.marketDepth[symbol].push(handler);\r\n\r\n                var bk = getMarketState().getBook(symbol);\r\n                if (bk)\r\n                    handler({ type: 'INIT', symbol: symbol });\r\n                break;\r\n            }\r\n            case 'marketUpdate': {\r\n                if (arguments.length < 3)\r\n                    throw new Error(\"Bad number of arguments. For marketUpdate events, please specify a symbol. on('marketUpdate', handler, symbol).\");\r\n\r\n                var symbol = arguments[2];\r\n\r\n                if (!__listeners.marketUpdate[symbol])\r\n                    __listeners.marketUpdate[symbol] = [];\r\n\r\n                var add = true;\r\n                for (var i = 0; i < __listeners.marketUpdate[symbol].length; i++) {\r\n                    if (__listeners.marketUpdate[symbol][i] == handler)\r\n                        add = false;                \r\n                }\r\n\r\n                if (add)\r\n                    __listeners.marketUpdate[symbol].push(handler);\r\n\r\n                var q = getMarketState().getQuote(symbol);\r\n                if (q)\r\n                    handler({ type: 'INIT', symbol: symbol });\r\n                break;\r\n            }\r\n            case 'timestamp': {\r\n                var add = true;\r\n                for (var i = 0; i < __listeners.timestamp.length; i++) {\r\n                    if (__listeners.timestamp[i] == handler)\r\n                        add = false;                \r\n                }\r\n\r\n                if (add)\r\n                    __listeners.timestamp.push(handler);                    \r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function onNewMessage(msg) {\r\n        var message;\r\n        try {\r\n            message = Barchart.RealtimeData.MessageParser.Parse(msg);\r\n            if (message.type) {\r\n                __marketState.processMessage(message);\r\n\r\n                switch (message.type) {\r\n                    case 'BOOK':\r\n                        broadcastEvent('marketDepth', message);\r\n                        break;\r\n                    case 'TIMESTAMP':\r\n                        broadcastEvent('timestamp', __marketState.getTimestamp());\r\n                        break;\r\n                    default:\r\n                        broadcastEvent('marketUpdate', message);\r\n                        break;\r\n                }\r\n            }\r\n            else\r\n                console.log(msg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.log(message);\r\n            console.trace();\r\n        }\r\n    }\r\n\r\n\r\n    function processCommands() {\r\n        var cmd = __commands.shift();\r\n        while (cmd) {\r\n            __connection.send(cmd);\r\n            cmd = __commands.shift();\r\n        }\r\n        setTimeout(processCommands, 200);\r\n    }\r\n\r\n\r\n    function processFeedMessages() {\r\n        var done = false;\r\n        var suffixLength = 9;\r\n\r\n        while (!done) {\r\n            var s = __feedMessages.shift();\r\n            if (!s)\r\n                done = true;\r\n            else {\r\n                var skip = false;\r\n\r\n                var msgType = 1; // Assume DDF message containing \\x03\r\n\r\n                var idx = -1;\r\n                var idxETX = s.indexOf('\\x03');\r\n                var idxNL = s.indexOf('\\x0A');\r\n\r\n                if ((idxNL > -1) && ((idxETX < 0) || (idxNL < idxETX))) {\r\n                    idx = idxNL;\r\n                    msgType = 2;\r\n                }\r\n                else if (idxETX > -1)\r\n                    idx = idxETX;\r\n\r\n\r\n                if (idx > -1) {\r\n                    var epos = idx + 1;\r\n                    if (msgType == 1) {\r\n                        if (s.length < idx + suffixLength + 1) {\r\n                            if (__feedMessages.length > 0)\r\n                                __feedMessages[0] = s + __feedMessages[0];\r\n                            else {\r\n                                __feedMessages.unshift(s);\r\n                                done = true;\r\n                            }\r\n\r\n                            skip = true;\r\n                        }\r\n                        else if (s.substr(idx + 1, 1) == '\\x14')\r\n                            epos += suffixLength + 1;\r\n                    }\r\n\r\n                    if (!skip) {\r\n                        var s2 = s.substring(0, epos);\r\n                        if (msgType == 2)\r\n                            s2 = s2.trim();\r\n                        else {\r\n                            idx = s2.indexOf('\\x01');\r\n                            if (idx > 0)\r\n                                s2 = s2.substring(idx);\r\n                        }\r\n\r\n                        if (s2.length > 0)\r\n                            onNewMessage(s2);\r\n\r\n                        s = s.substring(epos);\r\n                        if (s.length > 0) {\r\n                            if (__feedMessages.length > 0)\r\n                                __feedMessages[0] = s + __feedMessages[0];\r\n                            else\r\n                                __feedMessages.unshift(s);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (s.length > 0) {\r\n                        if (__feedMessages.length > 0)\r\n                            __feedMessages[0] = s + __feedMessages[0];\r\n                        else {\r\n                            __feedMessages.unshift(s);\r\n                            done = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (__feedMessages.length == 0)\r\n                done = true;\r\n        }\r\n\r\n        setTimeout(processFeedMessages, 125);\r\n    }\r\n\r\n\r\n    function pumpMessages() {\r\n        var msg = __networkMessages.shift();\r\n        while (msg) {\r\n            if (msg)\r\n                handleNetworkMessage(msg);\r\n\r\n            msg = __networkMessages.shift();\r\n        }\r\n\r\n        setTimeout(pumpMessages, 125);\r\n    }\r\n\r\n\r\n    function pumpTasks() {\r\n        if (__state == 'LOGGED_IN') {\r\n            if (__tasks['symbols'].length > 0) {\r\n                var ary = __tasks['symbols'];\r\n                __tasks['symbols'] = [];\r\n                var s = \"GO \";\r\n                for (var i = 0; i < ary.length; i++) {\r\n                    if (i > 0)\r\n                        s += ',';\r\n                    s += ary[i] + '=SsBbV';\r\n                }\r\n\r\n                __commands.push(s);\r\n            }\r\n        }\r\n\r\n        if (__tasks['symbols_off'].length > 0) {\r\n            var ary = __tasks['symbols_off'];\r\n            __tasks['symbols_off'] = [];\r\n            var s = \"STOP \";\r\n            for (var i = 0; i < ary.length; i++) {\r\n                if (i > 0)\r\n                    s += ',';\r\n                s += ary[i];\r\n            }\r\n\r\n            __commands.push(s);\r\n        }\r\n\r\n        setTimeout(pumpTasks, 200);\r\n    }\r\n\r\n\r\n    function refreshQuotes() {\r\n        var symbols = [];\r\n        for (var k in __symbols) {\r\n            symbols.push(k);\r\n        }\r\n\r\n        $.ajax({\r\n            url: 'quotes.php?username=' + __loginInfo.username + '&password=' + __loginInfo.password + '&symbols=' + symbols.join(','), \r\n        }).done(function(xml) {\r\n            $(xml).find('QUOTE').each(function() {\r\n                onNewMessage('%' + this.outerHTML);\r\n            });\r\n        });\r\n        setTimeout(refreshQuotes, 5000);\r\n    }\r\n\r\n\r\n    function requestSymbols(symbols) {\r\n        for (var i = 0; i < symbols.length; i++) {\r\n            var s = symbols[i];\r\n            if (typeof(symbols[i]) != 'string')\r\n                s = s.symbol;\r\n\r\n            if (!__symbols[s]) {\r\n                __tasks[\"symbols\"].push(s);\r\n                __symbols[s] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function unRequestSymbols (symbols) {\r\n        for (var i = 0; i < symbols.length; i++) {\r\n            if (__symbols[symbols[i]]) {\r\n                __tasks['symbols_off'].push(symbols[i]);\r\n                __symbols[symbols[i]] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getActiveSymbolCount(){\r\n        var count = 0;\r\n        var keys = Object.keys(__symbols);\r\n        for(var i= 0; i < keys.length; i++){\r\n            if(__symbols[keys[i]] && __symbols[keys[i]]===true){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    setTimeout(processCommands, 200);\r\n    setTimeout(pumpMessages, 125);\r\n    setTimeout(pumpTasks, 200);\r\n    setTimeout(processFeedMessages, 125);\r\n\r\n\r\n    return {\r\n        connect : function(server, username, password){\r\n            /* always reset when told to connect */\r\n            __isConsumerDisconnect = false;\r\n\r\n            connect(server, username, password);\r\n            return this;\r\n        },\r\n        disconnect: function(){\r\n            /* set to true so we know not to reconnect */\r\n            __isConsumerDisconnect = true;\r\n\r\n            disconnect();\r\n            return this;\r\n        },\r\n        getMarketState: getMarketState,\r\n        getPassword : getPassword,\r\n        getUsername : getUsername,\r\n        off: off,\r\n        on : on,\r\n        requestSymbols : requestSymbols,\r\n        unRequestSymbols : unRequestSymbols,\r\n        getActiveSymbolCount: getActiveSymbolCount\r\n    }\r\n};\r\n","/*!\r\n * barchart-realtimedata-historicaldata-1.0.js\r\n * Barchart Realtime Data JavaScript Library v1.0\r\n *\r\n * Copyright 2014 - 2015 Barchart.com, Inc.\r\n */\r\n;(function() {\r\n    // The Barchart namespace\r\n    if (!window.Barchart) window.Barchart = {};\r\n    if (!window.Barchart.RealtimeData) window.Barchart.RealtimeData = {};\r\n}());\r\n\r\n\r\nBarchart.RealtimeData.HistoricalData = function() {\r\n    var _url = 'proxies/historicaldata';\r\n\r\n    function getHistoricalData(params, callback) {\r\n        $.ajax({\r\n            url : _url,\r\n            dataType : 'text',\r\n            data : params\r\n        }).done(function(json) {\r\n            return callback(json);\r\n        });\r\n    }\r\n\r\n    return {\r\n        getHistoricalData : getHistoricalData\r\n    };\r\n\r\n};","/*!\r\n * barchart-realtimedata-marketstate-1.0.js\r\n * Barchart Realtime Data JavaScript Library v1.0\r\n *\r\n * Copyright 2014 - 2015 Barchart.com, Inc.\r\n */\r\n;(function() {\r\n    // The Barchart namespace\r\n    if (!window.Barchart) window.Barchart = {};\r\n    if (!window.Barchart.RealtimeData) window.Barchart.RealtimeData = {}\r\n}());\r\n\r\n\r\n// MarketState\r\n// Essentially a DB and Message Processor\r\nBarchart.RealtimeData.MarketState = function() {\r\n    var _MAX_TIMEANDSALES = 10;\r\n\r\n    var _book = {};\r\n    var _cvol = {};\r\n    var _quote = {};\r\n    var _timestamp = undefined;\r\n    var _timeAndSales = {};\r\n\r\n    var _getCreateBook = function(symbol) {\r\n        if (!_book[symbol]) {\r\n            _book[symbol] = {\r\n                \"symbol\" : symbol,\r\n                \"bids\" : [],\r\n                \"asks\" : []\r\n            };\r\n        }\r\n        return _book[symbol];\r\n    };\r\n\r\n\r\n    var _getCreateQuote = function(symbol) {\r\n        if (!_quote[symbol]) {\r\n            _quote[symbol] = new Barchart.RealtimeData.MarketState.Quote();\r\n            _quote[symbol].symbol = symbol;\r\n        }\r\n        return _quote[symbol];\r\n    };\r\n\r\n    var _getCreateTimeAndSales = function(symbol) {\r\n        if (!_timeAndSales[symbol]) {\r\n            _timeAndSales[symbol] = {\r\n                \"symbol\" : symbol\r\n            };\r\n        }\r\n        return _timeAndSales[symbol];            \r\n    };\r\n\r\n\r\n    function loadProfiles(symbols, callback) {\r\n        $.ajax({\r\n            url: 'proxies/instruments/?lookup=' + symbols.join(','), \r\n        }).done(function(json) {\r\n            if (json.status == 200) {\r\n                for (var i = 0; i < json.instruments.length; i++) {\r\n                    if (json.instruments[i].status == 200) {\r\n                        new Barchart.RealtimeData.MarketState.Profile(\r\n                            json.instruments[i].lookup,\r\n                            json.instruments[i].symbol_description,\r\n                            json.instruments[i].exchange_channel,\r\n                            json.instruments[i].base_code,\r\n                            json.instruments[i].point_value,\r\n                            json.instruments[i].tick_increment\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            callback();\r\n        });\r\n    }\r\n\r\n\r\n    var _processMessage = function(message) {\r\n        if (message.type == 'TIMESTAMP') {\r\n            _timestamp = message.timestamp;\r\n            return;\r\n        }\r\n\r\n\r\n    \tvar q = _getCreateQuote(message.symbol);\r\n\r\n        var p = Barchart.RealtimeData.MarketState.Profile.prototype.Profiles[message.symbol];\r\n        if ((!p) && (message.type != 'REFRESH_QUOTE')) {\r\n            console.warn('No profile found for ' + message.symbol);\r\n            console.log(message);\r\n            return;\r\n        }\r\n\r\n\r\n        if ((!q.day) && (message.day)) {\r\n            q.day = message.day;\r\n            q.dayNum = Barchart.RealtimeData.Util.DayCodeToNumber(q.day); \r\n        }\r\n\r\n        if (message.type != 'BOOK') {\r\n            if ((q.day) && (message.day)) {\r\n\r\n                var dayNum = Barchart.RealtimeData.Util.DayCodeToNumber(message.day);\r\n\r\n                if ((dayNum > q.dayNum) || ((q.dayNum - dayNum) > 5)) {\r\n        \t\t\t// Roll the quote\r\n                    q.day = message.day;\r\n                    q.dayNum = dayNum;\r\n        \t\t\tq.flag = 'p';\r\n        \t\t\tq.bidPrice = 0.0;\r\n        \t\t\tq.bidSize = undefined;\r\n        \t\t\tq.askPrice = undefined;\r\n        \t\t\tq.askSize = undefined;\r\n        \t\t\tif (q.settlementPrice)\r\n        \t\t\t\tq.previousPrice = q.settlementPrice;\r\n        \t\t\telse if (q.lastPrice)\r\n        \t\t\t\tq.previousPrice = q.lastPrice;\r\n        \t\t\tq.lastPrice = undefined;\r\n        \t\t\tq.tradePrice = undefined;\r\n        \t\t\tq.tradeSize = undefined;\r\n        \t\t\tq.numberOfTrades = undefined;\r\n        \t\t\tq.openPrice = undefined;\r\n        \t\t\tq.highPrice = undefined;\r\n        \t\t\tq.lowPrice = undefined;\r\n        \t\t\tq.volume = undefined;\r\n        \t\t}\r\n        \t}\r\n        }\r\n\r\n\r\n        switch (message.type) {\r\n            case 'BOOK': {                \r\n\t\t    \tvar b = _getCreateBook(message.symbol);\r\n                b.asks = message.asks;\r\n                b.bids = message.bids;\r\n                break;\r\n            }\r\n            case 'HIGH': {\r\n                q.highPrice = message.value;\r\n                break;\r\n            }\r\n            case 'LOW': {\r\n                q.lowPrice = message.value;\r\n                break;\r\n            }\r\n            case 'OPEN': {\r\n            \tq.flag = undefined;\r\n            \tq.openPrice = message.value;\r\n                q.highPrice = message.value;\r\n                q.lowPrice = message.value;\r\n                q.lastPrice = message.value;\r\n            \tbreak;\r\n            }\r\n            case 'OPEN_INTEREST': {\r\n                q.openInterest = message.value;\r\n                break;\r\n            }\r\n            case 'REFRESH_DDF': {\r\n                switch (message.subrecord) {\r\n                    case '1':\r\n                    case '2':\r\n                    case '3': {\r\n                        q.message = message;\r\n                        if (message.openPrice === null)\r\n                            q.openPrice = undefined;\r\n                        else if (message.openPrice)\r\n                            q.openPrice = message.openPrice;\r\n\r\n                        if (message.highPrice === null)\r\n                            q.highPrice = undefined;\r\n                        else if (message.highPrice)\r\n                            q.highPrice = message.highPrice;\r\n\r\n                        if (message.lowPrice === null)\r\n                            q.lowPrice = undefined;\r\n                        else if (message.lowPrice)\r\n                            q.lowPrice = message.lowPrice;\r\n\r\n                        if (message.lastPrice === null)\r\n                            q.lastPrice = undefined;\r\n                        else if (message.lastPrice)\r\n                            q.lastPrice = message.lastPrice;\r\n\r\n                        if (message.bidPrice === null)\r\n                            q.bidPrice = undefined;\r\n                        else if (message.bidPrice)\r\n                            q.bidPrice = message.bidPrice;\r\n\r\n                        if (message.askPrice === null)\r\n                            q.askPrice = undefined;\r\n                        else if (message.askPrice)\r\n                            q.askPrice = message.askPrice;\r\n\r\n                        if (message.previousPrice === null)\r\n                            q.previousPrice = undefined;\r\n                        else if (message.previousPrice)\r\n                            q.previousPrice = message.previousPrice;\r\n\r\n                        if (message.settlementPrice === null) {\r\n                            q.settlementPrice = undefined;\r\n                            if (q.flag == 's')\r\n                                q.flag = undefined;\r\n                        }\r\n                        else if (message.settlementPrice)\r\n                            q.settlementPrice = message.settlementPrice;\r\n                        else {\r\n                            q.settlementPrice = undefined;\r\n                            if (q.flag == 's')\r\n                                q.flag = undefined;                    \r\n                        }\r\n\r\n                        if (message.volume === null)\r\n                            q.volume = undefined;\r\n                        else if (message.volume)\r\n                            q.volume = message.volume;\r\n\r\n                        if (message.openInterest === null)\r\n                            q.openInterest = undefined;\r\n                        else if (message.openInterest)\r\n                            q.openInterest = message.openInterest;\r\n\r\n                        if (message.subsrecord == '1')\r\n                            q.lastUpdate = message.time;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'REFRESH_QUOTE': {\r\n                p = new Barchart.RealtimeData.MarketState.Profile(message.symbol, message.name, message.exchange, message.unitcode, message.pointValue, message.tickIncrement); \r\n                \r\n                q.message = message;\r\n                q.flag = message.flag;\r\n                q.mode = message.mode;\r\n                q.lastUpdate = message.lastUpdate;\r\n                q.bidPrice = message.bidPrice;\r\n                q.bidSize = message.bidSize;\r\n                q.askPrice = message.askPrice;\r\n                q.askSize = message.askSize;\r\n                q.lastPrice = message.lastPrice;\r\n                q.tradeSize = message.tradeSize;\r\n                q.numberOfTrades = message.numberOfTrades;\r\n                q.previousPrice = message.previousPrice;\r\n                q.settlementPrice = message.settlementPrice;\r\n                q.openPrice = message.openPrice;\r\n                q.highPrice = message.highPrice;\r\n                q.lowPrice = message.lowPrice;\r\n                q.volume = message.volume;\r\n                q.openInterest = message.openInterest;\r\n\r\n                if (message.tradeTime)\r\n                    q.time = message.tradeTime;\r\n                else if (message.timeStamp)\r\n                    q.time = message.timeStamp;\r\n                break;\r\n            }\r\n            case 'SETTLEMENT': {\r\n                q.lastPrice = message.value;\r\n                q.settlement = message.value;\r\n                if (message.element == 'D')\r\n                    q.flag = 's';\r\n            }\r\n            case 'TOB': {\r\n                q.bidPrice = message.bidPrice;\r\n                q.bidSize = message.bidSize;\r\n                q.askPrice = message.askPrice;\r\n                q.askSize = message.askSize;\r\n                if (message.time)\r\n                    q.time = message.time;\r\n\r\n                break;\r\n            }\r\n            case 'TRADE': {                \r\n                q.tradePrice = message.tradePrice;\r\n                q.lastPrice = message.tradePrice;\r\n                if (message.tradeSize) {\r\n                    q.tradeSize = message.tradeSize;\r\n                    q.volume += message.tradeSize;\r\n                }\r\n\r\n                q.ticks.push({price: q.tradePrice, size: q.tradeSize});\r\n                while (q.ticks.length > 50) {\r\n                    q.ticks.shift();\r\n                }\r\n\r\n                if (!q.numberOfTrades)\r\n                    q.numberOfTrades = 0;\r\n\r\n                q.numberOfTrades++;\r\n\r\n                if (message.time)\r\n                    q.time = message.time;\r\n\r\n                q.flag = undefined;\r\n\r\n                // TO DO: Add Time and Sales Tracking\r\n                break;\r\n            }\r\n            case 'TRADE_OUT_OF_SEQUENCE': {\r\n                q.volume += message.tradeSize;\r\n                break;\r\n            }\r\n            case 'VOLUME': {\r\n                q.volume = message.value;\r\n                break;\r\n            }\r\n            case 'VOLUME_YESTERDAY':\r\n                break;\r\n            case 'VWAP':\r\n                q.vwap1 = message.value;\r\n                break;\r\n            default:\r\n                console.error('Unhandled Market Message:');\r\n                console.log(message);\r\n                break;\r\n        }\r\n    };\r\n\r\n    return {\r\n        getBook : function(symbol) {\r\n            return _book[symbol];\r\n        },\r\n        getCVol : function(symbol) {\r\n            return _cvol[symbol];\r\n        },\r\n        getProfile : function(symbol, callback) {\r\n            var p = Barchart.RealtimeData.MarketState.Profile.prototype.Profiles[symbol];\r\n            if (!p) {\r\n                loadProfiles([symbol], function() {\r\n                    p = Barchart.RealtimeData.MarketState.Profile.prototype.Profiles[symbol];\r\n                    callback(p);\r\n                });\r\n            }\r\n            else\r\n                callback(p);\r\n        },\r\n        getQuote : function(symbol) {\r\n            return _quote[symbol];\r\n        },\r\n        getTimestamp : function() {\r\n            return _timestamp;\r\n        },\r\n        processMessage : _processMessage\r\n    }\r\n};\r\n\r\n\r\nBarchart.RealtimeData.MarketState.Profile = function(symbol, name, exchange, unitCode, pointValue, tickIncrement) {\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n    this.exchange = exchange;\r\n    this.unitCode = unitCode;\r\n    this.pointValue = pointValue;\r\n    this.tickIncrement = tickIncrement;\r\n\r\n    var info = Barchart.RealtimeData.Util.ParseSymbolType(this.symbol);\r\n    if (info) {\r\n        if (info.type == 'future') {\r\n            this.root = info.root;\r\n            this.month = info.month;\r\n            this.year = info.year;\r\n        }\r\n    }\r\n\r\n    Barchart.RealtimeData.MarketState.Profile.prototype.Profiles[symbol] = this;\r\n};\r\n\r\n\r\nBarchart.RealtimeData.MarketState.Profile.prototype.PriceFormatter = function(fractionSeparator, specialFractions) {\r\n    var format = Barchart.RealtimeData.Util.PriceFormatter(fractionSeparator, specialFractions).format;\r\n\r\n    Barchart.RealtimeData.MarketState.Profile.prototype.formatPrice = function(price) {\r\n        return format(price, this.unitCode);\r\n    }\r\n};\r\n\r\nBarchart.RealtimeData.MarketState.Profile.prototype.Profiles = {};\r\n\r\n// The price formatter can be changed globally.\r\n\r\nBarchart.RealtimeData.MarketState.Profile.prototype.PriceFormatter('-', true);\r\n\r\n\r\n\r\nBarchart.RealtimeData.MarketState.Quote = function() {\r\n    this.symbol = null;\r\n    this.message = null;\r\n    this.flag = null;\r\n    this.mode = null;\r\n    this.day = null;\r\n    this.dayNum = 0;\r\n    this.session = null;\r\n    this.lastUpdate = null;\r\n    this.bidPrice = null;\r\n    this.bidSize = null;\r\n    this.askPrice = null;\r\n    this.askSize = null;\r\n    this.lastPrice = null;\r\n    this.tradePrice = null;\r\n    this.tradeSize = null;\r\n    this.numberOfTrades = null;\r\n    this.vwap1 = null; // Exchange Provided\r\n    this.vwap2 = null; // Calculated\r\n    this.settlementPrice = null;\r\n    this.openPrice = null;\r\n    this.highPrice = null;\r\n    this.lowPrice = null;\r\n    this.volume = null;\r\n    this.openInterest = null;\r\n    this.previousPrice = null;\r\n    this.time = null;\r\n    this.ticks = [];\r\n};\r\n","/*!\r\n * barchart-realtimedata-1.0.0.js\r\n * Barchart Realtime Data JavaScript Library v1.0.0\r\n * http://www.barchart.com-barchart-realtimedata-1\r\n *\r\n * Copyright 2014 - 2015 Barchart.com, Inc.\r\n */\r\n;(function() {\r\n    // The Barchart namespace\r\n    if (!window.Barchart) window.Barchart = {};\r\n    if (!window.Barchart.RealtimeData) window.Barchart.RealtimeData = {}\r\n}());\r\n\r\n\r\nBarchart.RealtimeData.MessageParser = {\r\n    ParseTimestamp : function(bytes) {\r\n        if (bytes.length != 9)\r\n            return null;\r\n\r\n        var year = (bytes.charCodeAt(0) * 100) + bytes.charCodeAt(1) - 64;\r\n        var month = bytes.charCodeAt(2) - 64 - 1;\r\n        var day = bytes.charCodeAt(3) - 64;\r\n        var hour = bytes.charCodeAt(4) - 64;\r\n        var minute = bytes.charCodeAt(5) - 64;\r\n        var second = bytes.charCodeAt(6) - 64;\r\n        var ms = (0xFF & bytes.charCodeAt(7)) + ((0xFF & bytes.charCodeAt(8)) << 8);\r\n\r\n        return new Date(year, month, day, hour, minute, second, ms);\r\n    },\r\n\r\n\r\n    ParseValue : function(str, unitcode) {\r\n        if (str.length < 1)\r\n            return undefined;\r\n        else if (str == '-')\r\n            return null;\r\n        else if (str.indexOf('.') > 0)\r\n            return parseFloat(str);\r\n\r\n        var sign = (str.substr(0, 1) == '-') ? -1 : 1;\r\n        if (sign == -1)\r\n            str = str.substr(1);\r\n\r\n\r\n        switch (unitcode) {\r\n            case '2': // 8ths\r\n                return sign * (((str.length > 1) ? parseInt(str.substr(0, str.length - 1)) : 0) + (parseInt(str.substr(-1)) / 8));\r\n                break;\r\n            case '3': // 16ths\r\n                return sign * (((str.length > 2) ? parseInt(str.substr(0, str.length - 2)) : 0) + (parseInt(str.substr(-2)) / 16));\r\n                break;\r\n            case '4': // 32ths\r\n                return sign * (((str.length > 2) ? parseInt(str.substr(0, str.length - 2)) : 0) + (parseInt(str.substr(-2)) / 32));\r\n                break;\r\n            case '5': // 64ths\r\n                return sign * (((str.length > 2) ? parseInt(str.substr(0, str.length - 2)) : 0) + (parseInt(str.substr(-2)) / 64));\r\n                break;\r\n            case '6': // 128ths\r\n                return sign * (((str.length > 3) ? parseInt(str.substr(0, str.length - 3)) : 0) + (parseInt(str.substr(-3)) / 128));\r\n                break;\r\n            case '7': // 256ths\r\n                return sign * (((str.length > 3) ? parseInt(str.substr(0, str.length - 3)) : 0) + (parseInt(str.substr(-3)) / 256));\r\n                break;\r\n            case '8':\r\n                return sign * parseInt(str);\r\n                break;\r\n            case '9':\r\n                return sign * (parseInt(str) / 10);\r\n                break;\r\n            case 'A':                \r\n                return sign * (parseInt(str) / 100);\r\n                break;\r\n            case 'B':\r\n                return sign * (parseInt(str) / 1000);\r\n                break;\r\n            case 'C':\r\n                return sign * (parseInt(str) / 10000);\r\n                break;\r\n            case 'D':\r\n                return sign * (parseInt(str) / 100000);\r\n                break;\r\n            case 'E':\r\n                return sign * (parseInt(str) / 1000000);\r\n                break;\r\n            default:\r\n                return sign * parseInt(str);\r\n                break;\r\n        }\r\n    },\r\n\r\n\r\n    Parse : function(msg) {\r\n        var message = {\r\n            message : msg,\r\n            \"type\" : null\r\n        };\r\n\r\n        switch (msg.substr(0, 1)) {\r\n            case '%': { // Jerq Refresh Messages                    \r\n                try {\r\n                    if (window.DOMParser) {\r\n                        var tmp = new DOMParser();\r\n                        xml = tmp.parseFromString(msg.substring(1), \"text/xml\" );\r\n                    }\r\n                    else { // IE\r\n                        xml = new ActiveXObject( \"Microsoft.XMLDOM\" );\r\n                        xml.async = \"false\";\r\n                        xml.loadXML(msg.substring(1));\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    xml = undefined;\r\n                }\r\n\r\n                if (xml) {\r\n                    var node = xml.firstChild;\r\n\r\n                    switch (node.nodeName) {\r\n                        case 'BOOK': {\r\n                            message.symbol = node.attributes.getNamedItem('symbol').value;\r\n                            message.unitcode = node.attributes.getNamedItem('basecode').value;\r\n                            message.askDepth = parseInt(node.attributes.getNamedItem('bidcount').value);\r\n                            message.bidDepth = parseInt(node.attributes.getNamedItem('bidcount').value);\r\n                            message.asks = [];\r\n                            message.bids = [];\r\n\r\n                            var ary1, ary2;\r\n                            \r\n                            if ((node.attributes.getNamedItem('askprices')) && (node.attributes.getNamedItem('asksizes'))) {\r\n                                ary1 = node.attributes.getNamedItem('askprices').value.split(',');\r\n                                ary2 = node.attributes.getNamedItem('asksizes').value.split(',');\r\n\r\n                                for (var i = 0; i < ary1.length; i++) {\r\n                                    message.asks.push({ \"price\" : Barchart.RealtimeData.MessageParser.ParseValue(ary1[i], message.unitcode), \"size\" : parseInt(ary2[i])});\r\n                                }\r\n                            }\r\n\r\n                            if ((node.attributes.getNamedItem('bidprices')) && (node.attributes.getNamedItem('bidsizes'))) {\r\n                                ary1 = node.attributes.getNamedItem('bidprices').value.split(',');\r\n                                ary2 = node.attributes.getNamedItem('bidsizes').value.split(',');\r\n\r\n                                for (var i = 0; i < ary1.length; i++) {\r\n                                    message.bids.push({ \"price\" : Barchart.RealtimeData.MessageParser.ParseValue(ary1[i], message.unitcode), \"size\" : parseInt(ary2[i])});\r\n                                }\r\n                            }\r\n\r\n                            message.type = 'BOOK';\r\n                            break;\r\n                        }\r\n                        case 'QUOTE': {\r\n                            for (var i = 0; i < node.attributes.length; i++) {\r\n                                switch (node.attributes[i].name) {\r\n                                    case 'symbol':\r\n                                        message.symbol = node.attributes[i].value;\r\n                                        break;\r\n                                    case 'name':\r\n                                        message.name = node.attributes[i].value;\r\n                                        break;\r\n                                    case 'exchange':\r\n                                        message.exchange = node.attributes[i].value;\r\n                                        break;\r\n                                    case 'basecode':\r\n                                        message.unitcode = node.attributes[i].value;\r\n                                        break;\r\n                                    case 'pointvalue':\r\n                                        message.pointValue = parseFloat(node.attributes[i].value);\r\n                                        break;\r\n                                    case 'tickincrement':\r\n                                        message.tickIncrement = parseInt(node.attributes[i].value);\r\n                                        break;\r\n                                    case 'flag':\r\n                                        message.flag = node.attributes[i].value;\r\n                                        break;\r\n                                    case 'lastupdate': {\r\n                                        var v = node.attributes[i].value;\r\n                                        message.lastUpdate = new Date(parseInt(v.substr(0, 4)), parseInt(v.substr(4, 2)) - 1, parseInt(v.substr(6, 2)), parseInt(v.substr(8, 2)), parseInt(v.substr(10, 2)), parseInt(v.substr(12, 2)));\r\n                                        break;\r\n                                    }\r\n                                    case 'bid':\r\n                                        message.bidPrice = Barchart.RealtimeData.MessageParser.ParseValue(node.attributes[i].value, message.unitcode);\r\n                                        break;\r\n                                    case 'bidsize':\r\n                                        message.bidSize = parseInt(node.attributes[i].value);\r\n                                        break;\r\n                                    case 'ask':\r\n                                        message.askPrice = Barchart.RealtimeData.MessageParser.ParseValue(node.attributes[i].value, message.unitcode);\r\n                                        break;\r\n                                    case 'asksize':\r\n                                        message.askSize = parseInt(node.attributes[i].value);\r\n                                        break;\r\n                                    case 'mode':\r\n                                        message.mode = node.attributes[i].value;\r\n                                        break;\r\n                                }\r\n\r\n                                var sessions = {};\r\n\r\n                                for (var j = 0; j < node.childNodes.length; j++) {\r\n                                    if (node.childNodes[j].nodeName == 'SESSION') {\r\n                                        var session = {};\r\n                                        var attributes = node.childNodes[j].attributes;\r\n\r\n                                        if (attributes.getNamedItem('id'))\r\n                                            session[\"id\"] = attributes.getNamedItem('id').value;\r\n\r\n                                        if (attributes.getNamedItem('day'))\r\n                                            session.day = attributes.getNamedItem('day').value;\r\n                                        if (attributes.getNamedItem('last'))\r\n                                            session.lastPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('last').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('previous'))\r\n                                            session.previousPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('previous').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('open'))\r\n                                            session.openPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('open').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('high'))\r\n                                            session.highPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('high').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('low'))\r\n                                            session.lowPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('low').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('tradesize'))\r\n                                            session.tradeSize = parseInt(attributes.getNamedItem('tradesize').value);\r\n                                        if (attributes.getNamedItem('numtrades'))\r\n                                            session.numberOfTrades = parseInt(attributes.getNamedItem('numtrades').value);\r\n                                        if (attributes.getNamedItem('settlement'))\r\n                                            session.settlementPrice = Barchart.RealtimeData.MessageParser.ParseValue(attributes.getNamedItem('settlement').value, message.unitcode);\r\n                                        if (attributes.getNamedItem('volume'))\r\n                                            session.volume = parseInt(attributes.getNamedItem('volume').value);\r\n                                        if (attributes.getNamedItem('openinterest'))\r\n                                            session.openInterest = parseInt(attributes.getNamedItem('openinterest').value);\r\n                                        if (attributes.getNamedItem('timestamp')) {\r\n                                            var v = attributes.getNamedItem('timestamp').value;\r\n                                            session.timeStamp = new Date(parseInt(v.substr(0, 4)), parseInt(v.substr(4, 2)) - 1, parseInt(v.substr(6, 2)), parseInt(v.substr(8, 2)), parseInt(v.substr(10, 2)), parseInt(v.substr(12, 2)));\r\n                                        }\r\n                                        if (attributes.getNamedItem('tradetime')) {\r\n                                            var v = attributes.getNamedItem('tradetime').value;\r\n                                            session.tradeTime = new Date(parseInt(v.substr(0, 4)), parseInt(v.substr(4, 2)) - 1, parseInt(v.substr(6, 2)), parseInt(v.substr(8, 2)), parseInt(v.substr(10, 2)), parseInt(v.substr(12, 2)));\r\n                                        }\r\n\r\n                                        if (session.id)\r\n                                            sessions[session.id] = session;\r\n                                    }\r\n                                }\r\n\r\n\r\n                                var session = ((sessions[\"combined\"].lastPrice) ? sessions[\"combined\"] : sessions[\"previous\"]);\r\n                                if (session.lastPrice)\r\n                                    message.lastPrice = session.lastPrice;\r\n                                if (session.previousPrice)\r\n                                    message.previousPrice = session.previousPrice;\r\n                                if (session.openPrice)\r\n                                    message.openPrice = session.openPrice;\r\n                                if (session.highPrice)\r\n                                    message.highPrice = session.highPrice;\r\n                                if (session.lowPrice)\r\n                                    message.lowPrice = session.lowPrice;\r\n                                if (session.tradeSize)\r\n                                    message.tradeSize = session.tradeSize;\r\n                                if (session.numberOfTrades)\r\n                                    message.numberOfTrades = session.numberOfTrades;\r\n                                if (session.settlementPrice)\r\n                                    message.settlementPrice = session.settlementPrice;\r\n                                if (session.volume)\r\n                                    message.volume = session.volume;\r\n                                if (session.openInterest)\r\n                                    message.openInterest = session.openInterest;\r\n                                if (session.timeStamp)\r\n                                    message.timeStamp = session.timeStamp;\r\n                                if (session.tradeTime)\r\n                                    message.tradeTime = session.tradeTime;\r\n\r\n                                if (session.id == 'combined') {\r\n                                    if (sessions['previous'].openInterest)\r\n                                        message.openInterest = sessions['previous'].openInterest;\r\n                                }\r\n                            }\r\n\r\n                            if (sessions['combined'].day)\r\n                                message.day = sessions['combined'].day;\r\n\r\n                            message.type = 'REFRESH_QUOTE';\r\n                            break;\r\n                        }\r\n                        default:\r\n                            console.log(msg);\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n            case '\\x01': { // DDF Messages\r\n                switch (msg.substr(1, 1)) {\r\n                    case '#': {\r\n                        // TO DO: Standardize the timezones for Daylight Savings\r\n                        message.type = 'TIMESTAMP';\r\n                        message.timestamp = new Date(parseInt(msg.substr(2, 4)), parseInt(msg.substr(6, 2)) - 1, parseInt(msg.substr(8, 2)), parseInt(msg.substr(10, 2)), parseInt(msg.substr(12, 2)), parseInt(msg.substr(14, 2)));\r\n                        break;\r\n                    }\r\n                    case '2': {\r\n\r\n                        message.record = '2';\r\n                        var pos = msg.indexOf(',', 0);\r\n                        message.symbol = msg.substring(2, pos);\r\n                        message.subrecord = msg.substr(pos + 1, 1);\r\n                        message.unitcode = msg.substr(pos + 3, 1);\r\n                        message.exchange = msg.substr(pos + 4, 1);\r\n                        message.delay = parseInt(msg.substr(pos + 5, 2));\r\n                        switch (message.subrecord) {\r\n                            case '0': {\r\n                                // TO DO: Error Handling / Sanity Check\r\n                                var pos2 = msg.indexOf(',', pos + 7);\r\n                                message.value = Barchart.RealtimeData.MessageParser.ParseValue(msg.substring(pos + 7, pos2), message.unitcode);\r\n                                message.element = msg.substr(pos2 + 1, 1);\r\n                                message.modifier = msg.substr(pos2 + 2, 1);\r\n\r\n                                switch (message.element) {\r\n                                \tcase 'A':\r\n                                \t\tmessage.type = 'OPEN';\r\n                                \t\tbreak;\r\n                                    case 'C':\r\n                                        if (message.modifier == '1')\r\n                                            message.type = 'OPEN_INTEREST';\r\n                                        break;\r\n                                \tcase 'D':\r\n                                \tcase 'd':\r\n                                \t\tif (message.modifier == '0')\r\n                                \t\t\tmessage.type = 'SETTLEMENT';\r\n                                \t\tbreak;\r\n                                    case 'V':\r\n                                        if (message.modifier == '0')\r\n                                            message.type = 'VWAP';\r\n                                        break;\r\n                                    case '0': {\r\n                                        if (message.modifier == '0') {\r\n                                            message.tradePrice = message.value;\r\n                                            message.type = 'TRADE';\r\n                                        }\r\n                                        break;\r\n                                    }\r\n                                    case '5':\r\n                                        message.type = 'HIGH';\r\n                                        break;\r\n                                    case '6':\r\n                                        message.type = 'LOW';\r\n                                        break;\r\n                                \tcase '7': {                                        \r\n                                        if (message.modifier == '1')\r\n                                            message.type ='VOLUME_YESTERDAY';\r\n                                \t\telse if (message.modifier == '6')\r\n\t                                        message.type ='VOLUME';\r\n                                \t\tbreak;\r\n                                    }\r\n                                }\r\n\r\n                                message.day = msg.substr(pos2 + 3, 1);\r\n                                message.session = msg.substr(pos2 + 4, 1);\r\n                                message.time = Barchart.RealtimeData.MessageParser.ParseTimestamp(msg.substr(msg.indexOf('\\x03') + 1, 9));\r\n                                break;\r\n                            }\r\n                            case '1':\r\n                            case '2':\r\n                            case '3':\r\n                            case '4': {\r\n                                var ary = msg.substring(pos + 8).split(',');\r\n                                message.openPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[0], message.unitcode);\r\n                                message.highPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[1], message.unitcode);\r\n                                message.lowPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[2], message.unitcode);\r\n                                message.lastPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[3], message.unitcode);\r\n                                message.bidPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[4], message.unitcode);\r\n                                message.askPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[5], message.unitcode);\r\n                                message.previousPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[7], message.unitcode);\r\n                                message.settlementPrice = Barchart.RealtimeData.MessageParser.ParseValue(ary[10], message.unitcode);\r\n                                message.volume = (ary[13].length > 0) ? parseInt(ary[13]) : undefined;\r\n                                message.openInterest = (ary[12].length > 0) ? parseInt(ary[12]) : undefined;\r\n                                message.day = ary[14].substr(0, 1);\r\n                                message.session = ary[14].substr(1, 1);\r\n                                message.time = Barchart.RealtimeData.MessageParser.ParseTimestamp(msg.substr(msg.indexOf('\\x03') + 1, 9));\r\n                                message.type = 'REFRESH_DDF';\r\n                                break;\r\n                            }\r\n                            case '7': {\r\n                                var pos2 = msg.indexOf(',', pos + 7);\r\n                                message.tradePrice = Barchart.RealtimeData.MessageParser.ParseValue(msg.substring(pos + 7, pos2), message.unitcode);\r\n\r\n                                pos = pos2 + 1;\r\n                                pos2 = msg.indexOf(',', pos);\r\n                                message.tradeSize = parseInt(msg.substring(pos, pos2));\r\n                                pos = pos2 + 1;\r\n                                message.day = msg.substr(pos, 1);\r\n                                message.session = msg.substr(pos + 1, 1);\r\n                                message.time = Barchart.RealtimeData.MessageParser.ParseTimestamp(msg.substr(msg.indexOf('\\x03') + 1, 9));\r\n                                message.type = 'TRADE';\r\n                                break;\r\n                            }\r\n                            case '8': {\r\n                                var pos2 = msg.indexOf(',', pos + 7);\r\n                                message.bidPrice = Barchart.RealtimeData.MessageParser.ParseValue(msg.substring(pos + 7, pos2), message.unitcode);\r\n                                pos = pos2 + 1;\r\n                                pos2 = msg.indexOf(',', pos);\r\n                                message.bidSize = parseInt(msg.substring(pos, pos2));\r\n                                pos = pos2 + 1;\r\n                                pos2 = msg.indexOf(',', pos);\r\n                                message.askPrice = Barchart.RealtimeData.MessageParser.ParseValue(msg.substring(pos, pos2), message.unitcode);\r\n                                pos = pos2 + 1;\r\n                                pos2 = msg.indexOf(',', pos);\r\n                                message.askSize = parseInt(msg.substring(pos, pos2));\r\n                                pos = pos2 + 1;\r\n                                message.day = msg.substr(pos, 1);\r\n                                message.session = msg.substr(pos + 1, 1);\r\n                                message.time = Barchart.RealtimeData.MessageParser.ParseTimestamp(msg.substr(msg.indexOf('\\x03') + 1, 9));\r\n                                message.type = 'TOB';\r\n                                break;\r\n                            }\r\n                            case 'Z': {\r\n                                var pos2 = msg.indexOf(',', pos + 7);\r\n                                message.tradePrice = Barchart.RealtimeData.MessageParser.ParseValue(msg.substring(pos + 7, pos2), message.unitcode);\r\n\r\n                                pos = pos2 + 1;\r\n                                pos2 = msg.indexOf(',', pos);\r\n                                message.tradeSize = parseInt(msg.substring(pos, pos2));\r\n                                pos = pos2 + 1;\r\n                                message.day = msg.substr(pos, 1);\r\n                                message.session = msg.substr(pos + 1, 1);\r\n                                message.time = Barchart.RealtimeData.MessageParser.ParseTimestamp(msg.substr(msg.indexOf('\\x03') + 1, 9));\r\n                                message.type = 'TRADE_OUT_OF_SEQUENCE';\r\n                                break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case '3': {\r\n                        var pos = msg.indexOf(',', 0);\r\n                        message.symbol = msg.substring(2, pos);\r\n                        message.subrecord = msg.substr(pos + 1, 1);\r\n                        switch (message.subrecord) {\r\n                            case 'B': {\r\n                                message.unitcode = msg.substr(pos + 3, 1);\r\n                                message.exchange = msg.substr(pos + 4, 1);\r\n                                message.bidDepth = ((msg.substr(pos + 5, 1) == 'A') ? 10 : parseInt(msg.substr(pos + 5, 1)));\r\n                                message.askDepth = ((msg.substr(pos + 6, 1) == 'A') ? 10 : parseInt(msg.substr(pos + 6, 1)));\r\n                                message.bids = [];\r\n                                message.asks = [];\r\n                                var ary = msg.substring(pos + 8).split(',');\r\n                                for (var i = 0; i < ary.length; i++) {\r\n                                    var ary2 = ary[i].split(/[A-Z]/);\r\n                                    var c = ary[i].substr(ary2[0].length, 1);\r\n                                    if (c <= 'J')\r\n                                        message.asks.push({\"price\" : Barchart.RealtimeData.MessageParser.ParseValue(ary2[0], message.unitcode), \"size\" : parseInt(ary2[1])});\r\n                                    else\r\n                                        message.bids.push({\"price\" : Barchart.RealtimeData.MessageParser.ParseValue(ary2[0], message.unitcode), \"size\" : parseInt(ary2[1])});\r\n                                }\r\n\r\n                                message.type = 'BOOK';\r\n                                break;\r\n                            }\r\n                            default:\r\n                                break;\r\n                        }\r\n\r\n\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        message.type = 'UNKNOWN';\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return message;\r\n    }\r\n}"],"sourceRoot":"/source/"}